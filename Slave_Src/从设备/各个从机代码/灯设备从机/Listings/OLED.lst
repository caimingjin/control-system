C51 COMPILER V9.52.0.0   OLED                                                              08/19/2018 17:18:13 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE OLED
OBJECT MODULE PLACED IN .\Objects\OLED.obj
COMPILER INVOKED BY: D:\KEIL C51\C51\BIN\C51.EXE OLED.C BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\OLED.lst) TABS(2) OBJ
                    -ECT(.\Objects\OLED.obj)

line level    source

   1          /***********************************
   2            ÎÄ¼þÃû£º OLED.C
   3            °æ±¾ºÅ£º V1.0
   4            ×÷  Õß£º FG
   5            Ê±  ¼ä£º 2015-2-7 16:00:59
   6            ±¸  ×¢£º ²Î¿¼ÐÅÒâµç×Ó¿Æ¼¼oled.cÄÚÈÝ
   7          *************************************/
   8          
   9          #include "OLED.H"
  10          #include "stc15.h"
  11          
  12          sbit SCL_OLED       = P1^3;
  13          sbit SDA_OLED       = P1^2;
  14          sbit RST      = P1^1;
  15          sbit DC         = P1^0;
  16          
  17          //²Ù×÷ºº×ÖÊ±£¬ÓÃ»§×ÔÐÐÌæ»»ÏÂÃæºº×Ö¼°±àÂë
  18          const unsigned char code font16x16[] = {"ÁÁµÈ¼¶µÆÄ£ÄâµçÊÓ¸ö¡æÊý"}; //ÕâÀïÖ»¶Ôºº×Ö½øÐÐ±àÂë£¬Çë²»Òª°üº¬×Ö·ûµ
             -Ä±àÂë
  19          const unsigned char code font16x16_code[]={
  20          
  21            
  22            
  23          0x00,0x04,0x04,0x74,0x54,0x54,0x55,0x56,0x54,0x54,0x54,0x74,0x04,0x04,0x00,0x00,
  24          0x84,0x83,0x41,0x21,0x1D,0x05,0x05,0x05,0x05,0x05,0x7D,0x81,0x81,0x85,0xE3,0x00,/*"ÁÁ",0*/
  25          
  26          0x08,0x04,0x23,0x22,0x26,0x2A,0x22,0xFA,0x24,0x23,0x22,0x26,0x2A,0x02,0x02,0x00,
  27          0x01,0x09,0x09,0x09,0x19,0x69,0x09,0x09,0x49,0x89,0x7D,0x09,0x09,0x09,0x01,0x00,/*"µÈ",1*/
  28          
  29          0x20,0x30,0xAC,0x63,0x30,0x00,0x02,0x02,0xFE,0x02,0x02,0x62,0x5A,0xC6,0x00,0x00,
  30          0x22,0x67,0x22,0x12,0x12,0x40,0x30,0x8F,0x80,0x43,0x2C,0x10,0x2C,0x43,0x80,0x00,/*"¼¶",2*/
  31          0x80,0x70,0x00,0xFF,0x20,0x10,0x04,0x04,0x04,0x04,0xFC,0x04,0x04,0x04,0x04,0x00,
  32          0x80,0x60,0x18,0x07,0x08,0x30,0x00,0x00,0x40,0x80,0x7F,0x00,0x00,0x00,0x00,0x00,//µÆ",0*/
  33          
  34          0x10,0x10,0xD0,0xFF,0x90,0x14,0xE4,0xAF,0xA4,0xA4,0xA4,0xAF,0xE4,0x04,0x00,0x00,
  35          0x04,0x03,0x00,0xFF,0x00,0x89,0x4B,0x2A,0x1A,0x0E,0x1A,0x2A,0x4B,0x88,0x80,0x00,   //Ä£ ¡ú0
  36          0x10,0x10,0x10,0xFF,0x90,0x00,0xF8,0x00,0x02,0x04,0x18,0x00,0xFF,0x00,0x00,0x00,
  37          0x02,0x42,0x81,0x7F,0x00,0x00,0x3F,0x10,0x88,0x40,0x30,0x0C,0x0B,0x30,0xC0,0x00,  //Äâ ¡ú1
  38          /*--  ÎÄ×Ö:  µç  --*/
  39          /*--  ËÎÌå12;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
  40          0x00,0x00,0xF8,0x88,0x88,0x88,0x88,0xFF,0x88,0x88,0x88,0x88,0xF8,0x00,0x00,0x00,
  41          0x00,0x00,0x1F,0x08,0x08,0x08,0x08,0x7F,0x88,0x88,0x88,0x88,0x9F,0x80,0xF0,0x00,  //µç  ¡ú0
  42            
  43          /*--  ÎÄ×Ö:  ÊÓ  --*/
  44          /*--  ËÎÌå12;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
  45          0x08,0x08,0x89,0xEE,0x98,0x00,0x00,0xFE,0x02,0x02,0xF2,0x02,0x02,0xFE,0x00,0x00,
  46          0x02,0x01,0x00,0xFF,0x00,0x83,0x40,0x23,0x18,0x06,0x01,0x7E,0x80,0x83,0xE0,0x00,  //ÊÓ  ¡ú1
  47          
  48          
  49          0x80,0x80,0x40,0x20,0x10,0x08,0x04,0xC3,0x04,0x08,0x10,0x20,0x40,0x80,0x80,0x00,
  50          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//"¸ö",0
  51          /*--  ÎÄ×Ö:  ¡æ  --*/
  52          /*--  ËÎÌå12;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
  53          0x06,0x09,0x09,0xE6,0xF8,0x0C,0x04,0x02,0x02,0x02,0x02,0x02,0x04,0x1E,0x00,0x00,
C51 COMPILER V9.52.0.0   OLED                                                              08/19/2018 17:18:13 PAGE 2   

  54          0x00,0x00,0x00,0x07,0x1F,0x30,0x20,0x40,0x40,0x40,0x40,0x40,0x20,0x10,0x00,0x00,
  55          
  56          0x90,0x52,0x34,0x10,0xFF,0x10,0x34,0x52,0x80,0x70,0x8F,0x08,0x08,0xF8,0x08,0x00,
  57          0x82,0x9A,0x56,0x63,0x22,0x52,0x8E,0x00,0x80,0x40,0x33,0x0C,0x33,0x40,0x80,0x00,//"Êý",0
  58          
  59          
  60          
  61          };
  62          //======================================================
  63          void Delay_us()
  64          {
  65   1        ;;
  66   1      }
  67          
  68          //======================================================
  69          // 128X64OLEDÒº¾§µ×²ãÇý¶¯[6X8]×ÖÌå¿â
  70          // Éè¼ÆÕß: ÐÅÒâ¿Æ¼¼
  71          // Ãè  Êö: [8X16]Î÷ÎÄ×Ö·ûµÄ×ÖÄ£Êý¾Ý (×ÝÏòÈ¡Ä£,×Ö½Úµ¹Ðò)
  72          // !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
  73          //±¸×¢£ºÕâÀïÖ±½Ó²ÉÓÃÐÅÒâ¿Æ¼¼Ìá¹©µÄ8*16±àÂë£¬ÓÃ»§Ò²¿É²ÉÓÃ±àÂë¹¤¾ß×ÔÐÐ±àÂë
  74          //======================================================
  75          
  76          const unsigned char code F6x8[][6] ={0};
  77          //{
  78          //    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   //sp0
  79          //    { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !1
  80          //    { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "2
  81          //    { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #3
  82          //    { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $4
  83          //    { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %5
  84          //    { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &6
  85          //    { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '7
  86          //    { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (8
  87          //    { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )9
  88          //    { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *10
  89          //    { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +11
  90          //    { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,12
  91          //    { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -13
  92          //    { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .14
  93          //    { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /15
  94          //    { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 016
  95          //    { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 117
  96          //    { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 218
  97          //    { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 319
  98          //    { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 420
  99          //    { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 521
 100          //    { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 622
 101          //    { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 723
 102          //    { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 824
 103          //    { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 925
 104          //    { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :26
 105          //    { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;27
 106          //    { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <28
 107          //    { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =29
 108          //    { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >30
 109          //    { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?31
 110          //    { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @32
 111          //    { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A33
 112          //    { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B34
 113          //    { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C35
 114          //    { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D36
 115          //    { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E37
C51 COMPILER V9.52.0.0   OLED                                                              08/19/2018 17:18:13 PAGE 3   

 116          //    { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F38
 117          //    { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G39
 118          //    { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H40
 119          //    { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I41
 120          //    { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J42
 121          //    { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K43
 122          //    { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L44
 123          //    { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M45
 124          //    { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N46
 125          //    { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O47
 126          //    { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P48
 127          //    { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q49
 128          //    { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R50
 129          //    { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S51
 130          //    { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T52
 131          //    { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U53
 132          //    { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V54
 133          //    { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W55
 134          //    { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X56
 135          //    { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y57
 136          //    { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z58
 137          //    { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [59
 138          //    { 0x00, 0x02, 0x04, 0x08, 0x10, 0x20 },   // \60
 139          //    { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]61
 140          //    { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^62
 141          //    { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _63
 142          //    { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '64
 143          //    { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a65
 144          //    { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b66
 145          //    { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c67
 146          //    { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d68
 147          //    { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e69
 148          //    { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f70
 149          //    { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g71
 150          //    { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h72
 151          //    { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i73
 152          //    { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j74
 153          //    { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k75
 154          //    { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l76
 155          //    { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m77
 156          //    { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n78
 157          //    { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o79
 158          //    { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p80
 159          //    { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q81
 160          //    { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r82
 161          //    { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s83
 162          //    { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t84
 163          //    { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u85
 164          //    { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v86
 165          //    { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w87
 166          //    { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x88
 167          //    { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y89
 168          //    { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z90
 169          //    { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines91
 170          //};
 171          
 172          //======================================================
 173          // 128X64OLEDÒº¾§µ×²ãÇý¶¯[8X16]×ÖÌå¿â
 174          // Éè¼ÆÕß: ÐÅÒâ¿Æ¼¼
 175          // Ãè  Êö: [8X16]Î÷ÎÄ×Ö·ûµÄ×ÖÄ£Êý¾Ý (×ÝÏòÈ¡Ä£,×Ö½Úµ¹Ðò)
 176          // !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
 177          //±¸×¢£ºÕâÀïÖ±½Ó²ÉÓÃÐÅÒâ¿Æ¼¼Ìá¹©µÄ8*16±àÂë£¬ÓÃ»§Ò²¿É²ÉÓÃ±àÂë¹¤¾ß×ÔÐÐ±àÂë
C51 COMPILER V9.52.0.0   OLED                                                              08/19/2018 17:18:13 PAGE 4   

 178          //======================================================
 179          
 180          const unsigned char code F8X16[][16]=
 181          {
 182              {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},// 0
 183              {0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00},//!1
 184              {0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//"2
 185              {0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00},//#3
 186              {0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00},//$4
 187              {0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00},//%5
 188              {0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10},//&6
 189              {0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//'7
 190              {0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00},//(8
 191              {0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00},//)9
 192              {0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00},//*10
 193              {0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00},//+11
 194              {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00},//,12
 195              {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01},//-13
 196              {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00},//.14
 197              {0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00},///15
 198              {0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00},//016
 199              {0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00},//117
 200              {0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00},//218
 201              {0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00},//319
 202              {0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00},//420
 203              {0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00},//521
 204              {0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00},//622
 205              {0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00},//723
 206              {0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00},//824
 207              {0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00},//925
 208              {0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00},//:26
 209              {0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00},//;27
 210              {0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00},//<28
 211              {0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00},//=29
 212              {0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00},//>30
 213              {0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00},//?31
 214              {0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00},//@32
 215              {0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20},//A33
 216              {0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00},//B34
 217              {0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00},//C35
 218              {0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00},//D36
 219              {0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00},//E37
 220              {0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00},//F38
 221              {0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00},//G39
 222              {0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20},//H40
 223              {0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00},//I41
 224              {0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00},//J42
 225              {0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00},//K43
 226              {0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00},//L44
 227              {0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00},//M45
 228              {0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00},//N46
 229              {0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00},//O47
 230              {0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00},//P48
 231              {0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00},//Q49
 232              {0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20},//R50
 233              {0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00},//S51
 234              {0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00},//T52
 235              {0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00},//U53
 236              {0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00},//V54
 237              {0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00},//W55
 238              {0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20},//X56
 239              {0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00},//Y57
C51 COMPILER V9.52.0.0   OLED                                                              08/19/2018 17:18:13 PAGE 5   

 240              {0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00},//Z58
 241              {0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00},//[59
 242              {0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00},//\60
 243              {0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00},//]61
 244              {0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//^62
 245              {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80},//_63
 246              {0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//`64
 247              {0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20},//a65
 248              {0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00},//b66
 249              {0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00},//c67
 250              {0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20},//d68
 251              {0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00},//e69
 252              {0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00},//f70
 253              {0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00},//g71
 254              {0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20},//h72
 255              {0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00},//i73
 256              {0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00},//j74
 257              {0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00},//k75
 258              {0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00},//l76
 259              {0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F},//m77
 260              {0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20},//n78
 261              {0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00},//o79
 262              {0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00},//p80
 263              {0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80},//q81
 264              {0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00},//r82
 265              {0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00},//s83
 266              {0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00},//t84
 267              {0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20},//u85
 268              {0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00},//v86
 269              {0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00},//w87
 270              {0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00},//x88
 271              {0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00},//y89
 272              {0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00},//z90
 273              {0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40},//{91
 274              {0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00},//|92
 275              {0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00},//}93
 276              {0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//~94
 277          };
 278          
 279          /*----------------------------------------------------------------------------*
 280           * ÄÚ²¿º¯ÊýÔ­ÐÍ                                                               *
 281           *----------------------------------------------------------------------------*/
 282          void WriteDat(unsigned char Dat);
 283          void WriteCmd(unsigned char Cmd);
 284          void SetPos(unsigned char Page, unsigned char Column);
 285          void FillScreen(unsigned char Dat);
 286          void SetAddressMode(unsigned char  AddMode);                   //È¡ÖµÎª0~2
 287          void SetStartPage(unsigned char StartPage);                      //ÓÃÓÚÒ³µØÖ·Ä£Ê½
 288          void SetStartColumn(unsigned char StartColumn);                //ÓÃÓÚÒ³µØÖ·Ä£Ê½
 289          void SetPageAddress(unsigned char Start, unsigned char End);   //×¢£º¸Ãº¯Êý½öÓÃÓÚË®Æ½µØÖ·»ò´¹Ö±µØÖ·Ä£Ê½
 290          void SetColumnAddress(unsigned char Start, unsigned char End);   //×¢£º¸Ãº¯Êý½öÓÃÓÚË®Æ½µØÖ·»ò´¹Ö±µØÖ·Ä£Ê½
 291          void SetStartLine(unsigned char StartLine);                      //È¡Öµ£º0~63
 292          void SetContrast(unsigned char ContrastValue);                   //È¡Öµ·¶Î§Îª0~255¹²256¼¶¶Ô±È¶È
 293          void SetChargePump(unsigned char  on);                           //0£º¹Ø±ÕµçºÉ±Ã£»1£º¿ªÆôµçºÉ±Ã
 294          void SetCommonRemap(unsigned char Dat);                          //ÉèÖÃCOMÊä³öµÄÉ¨Ãè·½Ïò
 295          void SetSegmentRemap(unsigned char Dat);                       //ÉèÖÃsegmentµÄÖØÓ³Éä
 296          void SetEntireDisplay(unsigned char OnMode);                   // 0: Õý³£ÏÔÊ¾
 297          void SetInverseDisplay(unsigned char InverseValue);          // ·´°×ÏÔÊ¾¿ª/¹Ø
 298          void SetMultiplexRatio(unsigned char Ratio);                   //È¡Öµ£º0~63
 299          void SetDisplayOnOff(unsigned char on);                          // ÉèÖÃÏÔÊ¾¿ª/¹Ø
 300          void SetDisplayOffset(unsigned char OffsetValue);
 301          void SetDisplayClock(unsigned char Value);
C51 COMPILER V9.52.0.0   OLED                                                              08/19/2018 17:18:13 PAGE 6   

 302          void SetPrechargePeriod(unsigned char Value);                    // ÉèÖÃÔ¤³äµçÖÜÆÚ£¬È±Ê¡Îª0x22
 303          void SetCommonConfig(unsigned char Dat);                       // È±Ê¡ => 0x12 (0x10)
 304          void SetVCOMH(unsigned char Dat);                                //Dat¸ñÊ½£º 0xxx_0000
 305          void SetNop(void);
 306          void OLED_Init(void);
 307          void WriteChar_6x8(unsigned char Page,unsigned char Column, unsigned char Dat);
 308          void WriteStr_8x16(unsigned char Page, unsigned char Column, unsigned char Str[]);
 309          void WriteChinese16x16(unsigned char Page,unsigned char Column,unsigned char Str[]);
 310          void WriteMixStrXx16(unsigned char Page, unsigned char Column, unsigned char Str[]);
 311          void PrintChar(unsigned char Page, unsigned char Column, char Dat);
 312          void PrintShort(unsigned char Page, unsigned char Column, int Dat);
 313          void PrintImage(unsigned char ImageTable[], unsigned char RowNum, unsigned char ColumnNum);
 314          
 315          
 316          /*----------------------------------------------------------------------------*
 317           * Íâ²¿º¯ÊýÔ­ÐÍ                                                               *
 318           *----------------------------------------------------------------------------*/
 319          
 320          /*****************************************************************************
 321           º¯ Êý Ãû  : WriteDat
 322           ¹¦ÄÜÃèÊö  : ÏòOLEDÐ´Êý¾Ý
 323           ÊäÈë²ÎÊý  : unsigned char   Dat
 324           Êä³ö²ÎÊý  : NONE
 325           ·µ »Ø Öµ  : NONE
 326          *****************************************************************************/
 327          void WriteDat(unsigned char Dat)
 328          {
 329   1          unsigned char i;
 330   1      
 331   1          for(i=0;i<8;i++)
 332   1          { 
 333   2          DC   = 1;           //Ð´Êý¾Ý
 334   2            SCL_OLED  = 0;            //SCL_OLEDÀ­µÍ£¬ÎªÊý¾Ý½»»»×ö×¼±¸
 335   2          Delay_us();
 336   2      
 337   2              if (Dat&0x80)           //ÏÈ·¢ËÍ×î¸ßÎ»
 338   2                  SDA_OLED = 1;
 339   2              else
 340   2                  SDA_OLED = 0;
 341   2      
 342   2              SCL_OLED = 1;             //ÉÏÉýÑØËø´æÊý¾Ýµ½OLED
 343   2              Delay_us();   
 344   2              Dat <<= 1;    
 345   2          }
 346   1      }
 347          
 348          /*****************************************************************************
 349           º¯ Êý Ãû  : WriteCmd
 350           ¹¦ÄÜÃèÊö  : ÏòOLEDÐ´ÃüÁî
 351           ÊäÈë²ÎÊý  : unsigned char Cmd  
 352           Êä³ö²ÎÊý  : NONE
 353           ·µ »Ø Öµ  : NONE
 354          *****************************************************************************/
 355          void WriteCmd(unsigned char Cmd)
 356          {
 357   1             unsigned char i;
 358   1      
 359   1          for(i=0;i<8;i++)
 360   1          { 
 361   2          DC   = 0;           //Ð´ÃüÁî
 362   2            SCL_OLED  = 0;            //SCL_OLEDÀ­µÍ£¬ÎªÊý¾Ý½»»»×ö×¼±¸
 363   2          Delay_us();
C51 COMPILER V9.52.0.0   OLED                                                              08/19/2018 17:18:13 PAGE 7   

 364   2      
 365   2              if (Cmd&0x80)           //ÏÈ·¢ËÍ×î¸ßÎ»
 366   2                  SDA_OLED = 1;
 367   2              else
 368   2                  SDA_OLED = 0;
 369   2      
 370   2              SCL_OLED = 1;             //ÉÏÉýÑØËø´æÊý¾Ýµ½OLED
 371   2              Delay_us();   
 372   2              Cmd <<= 1;    
 373   2          }
 374   1      }
 375          
 376          /*****************************************************************************
 377           º¯ Êý Ãû  : SetPos
 378           ¹¦ÄÜÃèÊö  : ÉèÖÃ×ø±ê
 379           ÊäÈë²ÎÊý  : unsigned char Page 
 380                       unsigned char Column  
 381           Êä³ö²ÎÊý  : NONE
 382           ·µ »Ø Öµ  : NONE
 383          *****************************************************************************/
 384          void SetPos(unsigned char Page, unsigned char Column)          //Column(ÁÐ)È¡Öµ0~127£¬Page(Ò³)È¡Öµ0~7
 385          { 
 386   1          WriteCmd(0xb0 + Page);           //Ò³Ä£Ê½ÏÂ£¬ÉèÖÃÒ³Ê×µØÖ·£¬pageµÄÈ¡Öµ£º0~7
 387   1          WriteCmd(((Column & 0xf0) >> 4) | 0x10);   //ÁÐÖµ¶ÔÓ¦µÄ¸ßËÄÎ»ÃüÁî£º 0001_X7X6X5X4
 388   1          WriteCmd(( Column & 0x0f) | 0x00);     //ÁÐÖµ¶ÔÓ¦µÄµÍËÄÎ»ÃüÁî£º 0000_X3X2X1X0
 389   1      } 
 390          
 391          /*****************************************************************************
 392           º¯ Êý Ãû  : FillScreen
 393           ¹¦ÄÜÃèÊö  : ¶ÔÈ«ÆÁÐ´ÈëÍ¬Ò»¸ö×Ö·û 
 394                       Èç LED_Fill(0x01);    ¶ÔÓÚÄ³Ò»Î»0Îª²»ÁÁ 1ÎªÁÁ
 395                      ------------------------------------------------------
 396                                          ¹²128ÁÐ
 397                            1           1                1   LSB
 398                        ¹²  0           0                0  ¡ü
 399                        8   0           0                0  |
 400             ´Ë         ×é  0       ¡­¡­0     ¡­¡­¡­¡­   0        |
 401             Îª         ×Ö  0           0                0  |
 402             Ò»         ·û  0           0                0  |
 403             Ò³         ¼´  0           0                0  |
 404                        8   0           0                0  MSB
 405          ---------------------------------------------¡ª-------------
 406                        Ò³  1           1                1
 407                        64  0           0                0
 408                        ÐÐ  .           .                .
 409                            .           .    ¡­¡­¡­¡­    .
 410                            .           .                . 
 411                            .           .                .
 412                            0           0                0
 413                      ------------------------------------------------------
 414           ÊäÈë²ÎÊý  : unsigned char Dat  
 415           Êä³ö²ÎÊý  : NONE
 416           ·µ »Ø Öµ  : NONE
 417          *****************************************************************************/
 418          void FillScreen(unsigned char Dat)
 419          {
 420   1          unsigned char Page,Column;
 421   1          
 422   1          for(Page = 0; Page < 8; Page++)
 423   1          {
 424   2              WriteCmd(0xb0 + Page);                  //0xb0+0~7±íÊ¾Ò³0~7£¬Ö¸¶¨Ò³µÄ¿ªÊ¼Î»ÖÃ
 425   2              WriteCmd(0x00);                         //0x00+0~16±íÊ¾½«128ÁÐ·Ö³É16×éÆäµØÖ·ÔÚÄ³×éÖÐµÄµÚ¼¸ÁÐ
C51 COMPILER V9.52.0.0   OLED                                                              08/19/2018 17:18:13 PAGE 8   

 426   2              WriteCmd(0x10);                         //0x10+0~16±íÊ¾½«128ÁÐ·Ö³É16×éÆäµØÖ·ËùÔÚµÚ¼¸×é
 427   2              for(Column = 0; Column < 128; Column++)  //Ð´128ÁÐ
 428   2              {
 429   3                  WriteDat(Dat);
 430   3              }
 431   2          }
 432   1      } 
 433          
 434          /*****************************************************************************
 435           º¯ Êý Ãû  : SetAddressMode
 436           ¹¦ÄÜÃèÊö  : ÉèÖÃµØÖ·µÄÄ£Ê½
 437           ÊäÈë²ÎÊý  : unsigned char AddMode  
 438           Êä³ö²ÎÊý  : NONE
 439           ·µ »Ø Öµ  : NONE
 440          *****************************************************************************/
 441          void SetAddressMode(unsigned char  AddMode)   //È¡ÖµÎª0~2
 442          {
 443   1          WriteCmd(0x20);        // ÉèÖÃÄÚ´æµØÖ·Ä£Ê½, È±Ê¡ => 0x02£¬¼´£ºÒ³µØÖ·Ä£Ê½
 444   1          WriteCmd(AddMode);      // 0x00 => Ë®Æ½µØÖ·Ä£Ê½; 0x01 => ´¹Ö±µØÖ·Ä£Ê½; 0x02 => Ò³µØÖ·Ä£Ê½             
             -                                          
 445   1      }
 446          
 447          /*****************************************************************************
 448           º¯ Êý Ãû  : SetStartPage
 449           ¹¦ÄÜÃèÊö  : ÉèÖÃÁÐµÄÆðÊ¼Î»ÖÃ
 450           ÊäÈë²ÎÊý  : unsigned char StartPage  
 451           Êä³ö²ÎÊý  : NONE
 452           ·µ »Ø Öµ  : NONE
 453          *****************************************************************************/
 454          void SetStartPage(unsigned char StartPage)  //ÓÃÓÚÒ³µØÖ·Ä£Ê½   
 455          {
 456   1          WriteCmd(0xb0 | StartPage);         //StartPageÈ¡Öµ£º0~7
 457   1      }
 458          
 459          /*****************************************************************************
 460           º¯ Êý Ãû  : SetStartColumn
 461           ¹¦ÄÜÃèÊö  : ÉèÖÃÁÐµÄÆðÊ¼Î»ÖÃ
 462           ÊäÈë²ÎÊý  : unsigned char StartColumn  
 463           Êä³ö²ÎÊý  : NONE
 464           ·µ »Ø Öµ  : NONE
 465          *****************************************************************************/
 466          void SetStartColumn(unsigned char StartColumn)     //ÓÃÓÚÒ³µØÖ·Ä£Ê½
 467          {                          //StartColumnÈ¡Öµ0~127
 468   1          WriteCmd(((StartColumn & 0xf0) >> 4) | 0x10);  //ÁÐÖµ¶ÔÓ¦µÄ¸ßËÄÎ»ÃüÁî£º 0001_X7X6X5X4
 469   1          WriteCmd(( StartColumn & 0x0f) | 0x00);      //ÁÐÖµ¶ÔÓ¦µÄµÍËÄÎ»ÃüÁî£º 0000_X3X2X1X0
 470   1      }
 471          
 472          /*****************************************************************************
 473           º¯ Êý Ãû  : SetPageAddress
 474           ¹¦ÄÜÃèÊö  : ÉèÖÃÐÐµØÖ·µÄ×÷ÓÃ·¶Î§
 475           ÊäÈë²ÎÊý  : unsigned char StartColumn  
 476           Êä³ö²ÎÊý  : NONE
 477           ·µ »Ø Öµ  : NONE
 478           ±¸    ×¢  : ¸Ãº¯Êý½öÓÃÓÚË®Æ½µØÖ·»ò´¹Ö±µØÖ·Ä£Ê½
 479          *****************************************************************************/
 480          void SetPageAddress(unsigned char Start, unsigned char End)  //×¢£º¸Ãº¯Êý½öÓÃÓÚË®Æ½µØÖ·»ò´¹Ö±µØÖ·Ä£Ê½
 481          {
 482   1          WriteCmd(0x22);        // ÉèÖÃÒ³µØÖ·
 483   1          WriteCmd(Start);           // ÆðÊ¼Ò³µØÖ·È±Ê¡Öµ => 0x00 
 484   1          WriteCmd(End);           // ½áÊøÒ³µØÖ·È±Ê¡Öµ => 0x07 
 485   1      }
 486          
C51 COMPILER V9.52.0.0   OLED                                                              08/19/2018 17:18:13 PAGE 9   

 487          /*****************************************************************************
 488           º¯ Êý Ãû  : SetColumnAddress
 489           ¹¦ÄÜÃèÊö  : ÉèÖÃÁÐµØÖ·µÄ×÷ÓÃ·¶Î§
 490           ÊäÈë²ÎÊý  : unsigned char Start, unsigned char End  
 491           Êä³ö²ÎÊý  : NONE
 492           ·µ »Ø Öµ  : NONE
 493           ±¸    ×¢  : ¸Ãº¯Êý½öÓÃÓÚË®Æ½µØÖ·»ò´¹Ö±µØÖ·Ä£Ê½
 494          *****************************************************************************/
 495          void SetColumnAddress(unsigned char Start, unsigned char End) //×¢£º¸Ãº¯Êý½öÓÃÓÚË®Æ½µØÖ·»ò´¹Ö±µØÖ·Ä£Ê½
 496          {
 497   1          WriteCmd(0x21);        // ÉèÖÃÁÐµØÖ·
 498   1          WriteCmd(Start);       // ÆðÊ¼µØÖ·È±Ê¡Öµ => 0x00 
 499   1          WriteCmd(End);         // ½áÊøµØÖ·È±Ê¡Öµ => 0x7F 
 500   1      }
 501          
 502          /*****************************************************************************
 503           º¯ Êý Ãû  : SetStartLine
 504           ¹¦ÄÜÃèÊö  : ÉèÖÃÆðÊ¼µÄÐÐÖµ
 505           ÊäÈë²ÎÊý  : unsigned char StartLine  
 506           Êä³ö²ÎÊý  : NONE
 507           ·µ »Ø Öµ  : NONE
 508          *****************************************************************************/
 509          void SetStartLine(unsigned char StartLine)    //È¡Öµ£º0~63
 510          {
 511   1          WriteCmd(0x40|StartLine);                 // ÉèÖÃÏÔÊ¾µÄÆðÊ¼ÐÐ, È±Ê¡Öµ => 0x40 (0x00)                  
             -                           
 512   1      }
 513          
 514          /*****************************************************************************
 515           º¯ Êý Ãû  : SetContrast
 516           ¹¦ÄÜÃèÊö  : ÉèÖÃÆðÊ¼µÄÐÐÖµ
 517           ÊäÈë²ÎÊý  : unsigned char ContrastValue  
 518           Êä³ö²ÎÊý  : NONE
 519           ·µ »Ø Öµ  : NONE
 520          *****************************************************************************/
 521          void SetContrast(unsigned char ContrastValue) //È¡Öµ·¶Î§Îª0~255¹²256¼¶¶Ô±È¶È
 522          {
 523   1          WriteCmd(0x81);               // ÉèÖÃOLEDÏÔÊ¾µÄ¶Ô±È¶È
 524   1          WriteCmd(ContrastValue);      // È±Ê¡ => 0x7F
 525   1      }
 526          
 527          /*****************************************************************************
 528           º¯ Êý Ãû  : SetChargePump
 529           ¹¦ÄÜÃèÊö  : ÉèÖÃÆðÊ¼µÄÐÐÖµ
 530           ÊäÈë²ÎÊý  : unsigned char On  
 531           Êä³ö²ÎÊý  : NONE
 532           ·µ »Ø Öµ  : NONE
 533          *****************************************************************************/
 534          void SetChargePump(unsigned char  on)   //0£º¹Ø±ÕµçºÉ±Ã£»1£º¿ªÆôµçºÉ±Ã
 535          {
 536   1          WriteCmd(0x8D);                   // Set Charge Pump
 537   1        if(on)
 538   1            WriteCmd(0x14);               // 0x14,Ê¹ÄÜµçºÉ±Ã
 539   1        else
 540   1          WriteCmd(0x10);               // È±Ê¡ => 0x10£¬¼´¹Ø±ÕµçºÉ±Ã
 541   1      }
 542          
 543          /*****************************************************************************
 544           º¯ Êý Ãû  : SetCommonRemap
 545           ¹¦ÄÜÃèÊö  : ÉèÖÃÐÐµÄÖØÓ³Éä(¿ÉÒÔÍ¨¹ýcomµÄÖØÓ³Éä£¬ÊµÏÖ´¹Ö±·½ÏòµÄ¾µÏñ)
 546           ÊäÈë²ÎÊý  : unsigned char Dat  
 547           Êä³ö²ÎÊý  : NONE
C51 COMPILER V9.52.0.0   OLED                                                              08/19/2018 17:18:13 PAGE 10  

 548           ·µ »Ø Öµ  : NONE
 549          *****************************************************************************/
 550          void SetCommonRemap(unsigned char Dat) //ÉèÖÃCOMÊä³öµÄÉ¨Ãè·½Ïò
 551          {
 552   1        if(Dat)
 553   1            WriteCmd(0xC8);   //0xc8 ´ÓCOM63¡ú0:
 554   1        else
 555   1          WriteCmd(0xC0);   //È±Ê¡=> 0xC0£¬´ÓCOM0¡ú63
 556   1      }
 557          
 558          /*****************************************************************************
 559           º¯ Êý Ãû  : SetSegmentRemap
 560           ¹¦ÄÜÃèÊö  : ÉèÖÃÁÐµÄÖØÓ³Éä(¿ÉÒÔÍ¨¹ýSegmentµÄÖØÓ³Éä£¬ÊµÏÖË®Æ½·½ÏòµÄ¾µÏñ)
 561           ÊäÈë²ÎÊý  : unsigned char On  
 562           Êä³ö²ÎÊý  : NONE
 563           ·µ »Ø Öµ  : NONE
 564          *****************************************************************************/
 565          void SetSegmentRemap(unsigned char Dat)    // ÉèÖÃsegmentµÄÖØÓ³Éä
 566          {                      // È±Ê¡ => 0xA0
 567   1        if(Dat)
 568   1            WriteCmd(0xA1);            // 0xA1 => ÁÐ127Ó³Éäµ½SEG0
 569   1          else                   
 570   1          WriteCmd(0xA0);                    // 0xA0 => ÁÐµØÖ·0Ó³Éäµ½seg127   
 571   1      }
 572          
 573          /*****************************************************************************
 574           º¯ Êý Ãû  : SetEntireDisplay
 575           ¹¦ÄÜÃèÊö  : ÉèÖÃÕûÆÁµÄÏÔÊ¾ÄÚÈÝ 
 576           ÊäÈë²ÎÊý  : unsigned char On  
 577           Êä³ö²ÎÊý  : NONE
 578           ·µ »Ø Öµ  : NONE
 579          *****************************************************************************/
 580          void SetEntireDisplay(unsigned char OnMode)   // 0: Õý³£ÏÔÊ¾
 581          {
 582   1          if(OnMode)        // Set Entire Display On / Off
 583   1          WriteCmd(0xA5);   // 0xA5 (0x01) => ¿ªÏÔÊ¾£¬µ«ºöÂÔRAMÖÐÄÚÈÝ
 584   1        else           
 585   1          WriteCmd(0xA4);   // 0xA4 (È±Ê¡) => Õý³£ÏÔÊ¾£¬ÏÔÊ¾RAMÖÐµÄÄÚÈÝ                           
 586   1      }
 587          
 588          /*****************************************************************************
 589           º¯ Êý Ãû  : SetInverseDisplay
 590           ¹¦ÄÜÃèÊö  : ÉèÖÃ·´°×ÏÔÊ¾Ä£Ê½ 
 591           ÊäÈë²ÎÊý  : unsigned char InverseValue  
 592           Êä³ö²ÎÊý  : NONE
 593           ·µ »Ø Öµ  : NONE
 594          *****************************************************************************/
 595          void  SetInverseDisplay(unsigned char InverseValue)  // ·´°×ÏÔÊ¾¿ª/¹Ø
 596          {
 597   1          WriteCmd(0xA6|InverseValue);  // È±Ê¡(InverseValue = 0) => 0xA6£¬Õý³£ÏÔÊ¾
 598   1                                      // 0xa7(InverseValue = 1) ,·´°×ÏÔÊ¾
 599   1      }
 600          
 601          /*****************************************************************************
 602           º¯ Êý Ãû  : SetMultiplexRatio
 603           ¹¦ÄÜÃèÊö  : ±¶ÆµÂÊÉèÖÃ
 604           ÊäÈë²ÎÊý  : unsigned char Ratio  
 605           Êä³ö²ÎÊý  : NONE
 606           ·µ »Ø Öµ  : NONE
 607          *****************************************************************************/
 608          void SetMultiplexRatio(unsigned char Ratio) //È¡Öµ£º0~63
 609          {
C51 COMPILER V9.52.0.0   OLED                                                              08/19/2018 17:18:13 PAGE 11  

 610   1          WriteCmd(0xA8);        // ÉèÖÃ±¶ÆµÂÊ
 611   1          WriteCmd(Ratio);       // È±Ê¡ => 0x3F (1/64 Duty)
 612   1      }
 613          
 614          /*****************************************************************************
 615           º¯ Êý Ãû  : SetDisplayOnOff
 616           ¹¦ÄÜÃèÊö  : ÏÔÊ¾¿ª/¹ØÉèÖÃ
 617           ÊäÈë²ÎÊý  : unsigned char ON  
 618           Êä³ö²ÎÊý  : NONE
 619           ·µ »Ø Öµ  : NONE
 620          *****************************************************************************/
 621          void SetDisplayOnOff(unsigned char on)    // ÉèÖÃÏÔÊ¾¿ª/¹Ø
 622          {
 623   1          WriteCmd(0xAE|on);  //0: ¹ØÏÔÊ¾£»1£º¿ªÏÔÊ¾ £¬È±Ê¡Îª¹Ø
 624   1      }
 625          
 626          /*****************************************************************************
 627           º¯ Êý Ãû  : SetDisplayOffset
 628           ¹¦ÄÜÃèÊö  : ÏÔÊ¾¿ª/¹ØÉèÖÃ
 629           ÊäÈë²ÎÊý  : unsigned char OffsetValue  
 630           Êä³ö²ÎÊý  : NONE
 631           ·µ »Ø Öµ  : NONE
 632          *****************************************************************************/
 633          void SetDisplayOffset(unsigned char OffsetValue)
 634          {
 635   1          WriteCmd(0xD3);        // ÉèÖÃÏÔÊ¾Æ«ÒÆÁ¿
 636   1          WriteCmd(OffsetValue); // Default => 0x00 £¬OffsetValueµÄÈ¡Öµ0~63£¬¿ÉÊµÏÖ´¹Ö±·½ÏòÉÏµÄÆ«ÒÆ
 637   1      }
 638          
 639          /*****************************************************************************
 640           º¯ Êý Ãû  : SetDisplayClock
 641           ¹¦ÄÜÃèÊö  : ÏÔÊ¾¾§ÌåÆµÂÊ¼°Ê±ÖÓ·ÖÆµÂÊ
 642           ÊäÈë²ÎÊý  : unsigned char Value  
 643           Êä³ö²ÎÊý  : NONE
 644           ·µ »Ø Öµ  : NONE
 645          *****************************************************************************/
 646          void SetDisplayClock(unsigned char Value)
 647          {
 648   1          WriteCmd(0xD5);         // Set Display Clock Divide Ratio / Oscillator Frequency
 649   1          WriteCmd(Value);        // Default => 0x80
 650   1                                  // D[3:0] => Êý¾ÝµÍËÄÎ»Îª·ÖÆµÂÊ
 651   1                                  // D[7:4] => ¸ßËÄÎ»Îª¾§ÌåÆµÂÊ
 652   1      }
 653          
 654          /*****************************************************************************
 655           º¯ Êý Ãû  : SetPrechargePeriod
 656           ¹¦ÄÜÃèÊö  : ÉèÖÃÔ¤³äµçÖÜÆÚ
 657           ÊäÈë²ÎÊý  : unsigned char Value  
 658           Êä³ö²ÎÊý  : NONE
 659           ·µ »Ø Öµ  : NONE
 660          *****************************************************************************/
 661          void SetPrechargePeriod(unsigned char Value) // ÉèÖÃÔ¤³äµçÖÜÆÚ£¬È±Ê¡Îª0x22
 662          {              
 663   1          WriteCmd(0xD9);        
 664   1          WriteCmd(Value);  // D[3:0]: Ô¤³äµçÖÜÆÚ£¬D[7:4]£º·ÅµçÖÜÆÚ 
 665   1      }
 666          
 667          /*****************************************************************************
 668           º¯ Êý Ãû  : SetCommonConfig
 669           ¹¦ÄÜÃèÊö  : ÉèÖÃÔ¤³äµçÖÜÆÚ
 670           ÊäÈë²ÎÊý  : unsigned char Dat  
 671           Êä³ö²ÎÊý  : NONE
C51 COMPILER V9.52.0.0   OLED                                                              08/19/2018 17:18:13 PAGE 12  

 672           ·µ »Ø Öµ  : NONE
 673          *****************************************************************************/
 674          void SetCommonConfig(unsigned char Dat) // È±Ê¡ => 0x12 (0x10)
 675          {
 676   1          WriteCmd(0xDA);        // ÉèÖÃCOM¶ËµÄÓ²¼þÅäÖÃ
 677   1          WriteCmd(0x02|Dat);    // Alternative COM Pin Configuration
 678   1                                 // Disable COM Left/Right Re-Map£¨Dat[5]:0,¹Ø±ÕCOMÖØÓ³Éä£»1£ºÊ¹ÄÜCOMÖØÓ³Éä£©
 679   1      }
 680          
 681          /*****************************************************************************
 682           º¯ Êý Ãû  : SetVCOMH
 683           ¹¦ÄÜÃèÊö  : ÉèÖÃCOM¶ËµÄµçÆ½µÈ¼¶
 684           ÊäÈë²ÎÊý  : unsigned char Dat  
 685           Êä³ö²ÎÊý  : NONE
 686           ·µ »Ø Öµ  : NONE
 687          *****************************************************************************/
 688          void SetVCOMH(unsigned char Dat)   //Dat¸ñÊ½£º 0xxx_0000
 689          {
 690   1          WriteCmd(0xDB);              // Set VCOMH Deselect Level
 691   1          WriteCmd(Dat);                 // È±Ê¡ => 0x20 (0.77*VCC)
 692   1      }
 693          
 694          /*****************************************************************************
 695           º¯ Êý Ãû  : SetNop
 696           ¹¦ÄÜÃèÊö  : ¿Õ²Ù×÷ NOP
 697           ÊäÈë²ÎÊý  : NONE
 698           Êä³ö²ÎÊý  : NONE
 699           ·µ »Ø Öµ  : NONE
 700          *****************************************************************************/
 701          void SetNop(void)
 702          {
 703   1          WriteCmd(0xE3);                // ²»²Ù×÷
 704   1      }
 705          
 706          /*****************************************************************************
 707           º¯ Êý Ãû  : LED_Init
 708           ¹¦ÄÜÃèÊö  : OLED³õÊ¼»¯
 709           ÊäÈë²ÎÊý  : VOID  
 710           Êä³ö²ÎÊý  : NONE
 711           ·µ »Ø Öµ  : NONE
 712           ±¸    ×¢  £ºÏêÏ¸Çë²Î¿¼0.96inch_LDR128064B2B201 9.5 Recommanded Software Initialization
 713          *****************************************************************************/
 714          void OLED_Init(void)        
 715          {
 716   1          unsigned char i;
 717   1      
 718   1          SCL_OLED = 1;      
 719   1          RST = 0;
 720   1          for(i = 0; i < 100; i++)
 721   1        {
 722   2          ;                      //´ÓÉÏµçµ½ÏÂÃæ¿ªÊ¼³õÊ¼»¯ÒªÓÐ×ã¹»µÄÊ±¼ä£¬¼´µÈ´ýRC¸´Î»Íê±Ï    
 723   2          }      
 724   1          RST = 1;
 725   1      
 726   1          SetDisplayOnOff(0);        // ¹ØÏÔÊ¾ (0£º¹ØÏÔÊ¾/1£º¿ªÏÔÊ¾)
 727   1          SetDisplayClock(0x80);     // ÉèÖÃÊ±ÖÓÎª100Frames/Sec £¬0x80ÎªÈ±Ê¡Öµ
 728   1          SetMultiplexRatio(0x3F);   // 1/64 Duty (0x0F~0x3F)
 729   1          SetDisplayOffset(0x00);    // ´¹Ö±ÏÔÊ¾ÎÞÆ«ÒÆ (0x00~0x3F)
 730   1          SetStartLine(0x00);        // ÉèÖÃÓ³ÉäÄÚÈÝÏÔÊ¾µÄÆðÊ¼ÐÐ(0x00~0x3F)
 731   1          SetChargePump(1);          // Ê¹ÄÜÄÚ²¿DC/DC×ª»»(0x00/0x04)
 732   1          SetAddressMode(0x02);      // ÉèÖÃÎªÒ³µØÖ·Ä£Ê½ (0x00/0x01/0x02)
 733   1          SetSegmentRemap(0x01);     // SegmentÖØÓ³Éä£»  0x00×óÓÒ·´ÖÃ 0x01Õý³£
C51 COMPILER V9.52.0.0   OLED                                                              08/19/2018 17:18:13 PAGE 13  

 734   1          SetCommonRemap(0x01);      // ÉèÖÃCOMÉ¨Ãè·½Ïò  0x00ÉÏÏÂ·´ÖÃ 0x08Õý³£
 735   1          SetCommonConfig(0x10);     // ÉèÖÃcomÐòÁÐµÄÅäÖÃ (0x00/0x10)
 736   1          SetContrast(0x7F);         // ÉèÖÃ¶Ô±È¶È
 737   1          SetPrechargePeriod(0xF1);  // ÉèÖÃÔ¤³äµçÖÜÆÚÎª15¸öÊ±ÖÓ£¬·ÅµçÖÜÆÚÎª1¸öÊ±ÖÓÖÜÆÚ
 738   1          SetVCOMH(0x40);            // ÉèÖÃCOM¶ËµçÆ½µÈ¼¶
 739   1          SetEntireDisplay(0);       // Õý³£ÏÔÊ¾(0£ºÕý³£ÏÔÊ¾/1£ººöÂÔÏÔÊ¾)
 740   1          SetInverseDisplay(0);      // ·´°×ÉèÖÃ (0£ºÕý³£ÏÔÊ¾/1£º·´°×ÏÔÊ¾)  
 741   1          SetDisplayOnOff(1);        // ¿ªÏÔÊ¾ (0£º¹ØÏÔÊ¾/1£º¿ªÏÔÊ¾)
 742   1          FillScreen(0x00);            // ³õÊ¼ÇåÆÁ£¬Ìî³ä¿Õ°×
 743   1      ///    SetPos(0,0);      //²¢½«Î»ÖÃÉèÖÃÔÚ0Ò³£¬0ÁÐ
 744   1      
 745   1      } 
 746           
 747          /*****************************************************************************
 748           º¯ Êý Ãû  : WriteChar_16x16
 749           ¹¦ÄÜÃèÊö  : ÏÔÊ¾Ò»¸ö6x8±ê×¼ASCII×Ö·û
 750           ÊäÈë²ÎÊý  : unsigned char Column  ÏÔÊ¾µÄºá×ø±ê0~122,
 751                                             ÒòÎª6*8¸ñÊ½µÄ×Ö·û¿í¶ÈÎª6£¬Òò´Ë×Ö·ûÆðÊ¼ÁÐµØÖ·Ö»ÄÜÎª0~122
 752                       unsigned char Page    Ò³·¶Î§0¡«7
 753                       unsigned char Dat  ÏÔÊ¾µÄ×Ö·û
 754           Êä³ö²ÎÊý  : NONE
 755           ·µ »Ø Öµ  : NONE
 756          *****************************************************************************/
 757          void WriteChar_16x16(unsigned char Page,unsigned char Column, unsigned char Dat)
 758          {
 759   1          unsigned char i, temp;     
 760   1             
 761   1          temp = Dat - 32;   //ASCIIÂë±íµÄ0~31Îª²»¿É¼û×Ö·û£¬F6x8µÄ±àÂëÊ×ÐÐÎªASCiiÂë±íµÄµÚ32ÐÐ£¬¹ÊÐè¼õ32
 762   1          if(Column > 122)
 763   1          {
 764   2              Column = 0;    //ÈôÎÞ·¨Ð´ÏÂÒ»¸ö×Ö·û£¬ÔòÁíÆðÒ»Ò³£¬²¢½«ÁÐµØÖ·¸ÄÖÁÊ×ÁÐ
 765   2              Page++;
 766   2          }
 767   1          SetPos(Page, Column);
 768   1          for(i = 0; i < 16; i++)
 769   1          {     
 770   2              WriteDat(F6x8[temp][i]);  
 771   2          }
 772   1      }
 773          
 774          /*****************************************************************************
 775           º¯ Êý Ãû  : WriteStr_6x8
 776           ¹¦ÄÜÃèÊö  : Ð´ÈëÒ»×é6x8±ê×¼ASCII×Ö·û´®
 777           ÊäÈë²ÎÊý  : unsigned char Page      Ò³·¶Î§0¡«7     
 778                       unsigned char Column    ÏÔÊ¾µÄºá×ø±ê0~122  
 779                       unsigned char Str[]     ÏÔÊ¾µÄ×Ö·û´®
 780           Êä³ö²ÎÊý  : NONE
 781           ·µ »Ø Öµ  : NONE
 782          *****************************************************************************/
 783          //void WriteStr_6x8(unsigned char Page, unsigned char Column, unsigned char Str[])
 784          //{
 785          //    unsigned char j; 
 786          
 787          //    for (j=0; Str[j] != '\0'; j++)    //ÅÐ¶Ï×Ö·û´®ÊÇ·ñ½áÊø£¬Ò²¿ÉÍ¨¹ýÖ¸Õë½øÐÐ²Ù×÷
 788          //    {    
 789          //        WriteChar_6x8(Page,Column,Str[j]);    //ÔÚÖ¸¶¨µÄµØ·½Ð´Ò»¸ö×Ö·û
 790          //        Column += 6;          //Ã¿Ð´Ò»¸ö×Ö·û£¬ÁÐµØÖ·¼Ó6
 791          //    }
 792          //}
 793          
 794          /*****************************************************************************
 795           º¯ Êý Ãû  : WriteStr_8x16
C51 COMPILER V9.52.0.0   OLED                                                              08/19/2018 17:18:13 PAGE 14  

 796           ¹¦ÄÜÃèÊö  : Ð´ÈëÒ»×é8x16±ê×¼ASCII×Ö·û´®
 797           ÊäÈë²ÎÊý  : unsigned char Page     ÎªÒ³·¶Î§0¡«3,ÒòÎª¸Ã¸ñÊ½µÄ×Ö·û¸ß¶ÈÕ¼ÓÃÁ½Ò³
 798                 unsigned char Column   ÎªÏÔÊ¾µÄºá×ø±ê0~120
 799                       unsigned char Str[]    ÒªÏÔÊ¾µÄ×Ö·û´®
 800           Êä³ö²ÎÊý  : NONE
 801           ·µ »Ø Öµ  : NONE
 802          *****************************************************************************/
 803          void WriteStr_8x16(unsigned char Page, unsigned char Column, unsigned char Str[])
 804          {
 805   1          unsigned char i, j, temp;
 806   1      
 807   1          Page <<= 1;             //ÏÔÊ¾¸ß¶ÈÎª16µÄ×Ö·ûÊ±£¬ÆÁÄ»0~7Ò³×ª»¯Îª0~3ÐÐ£¬¼´Á½Ò³ÎªÒ»ÐÐ
 808   1                                            //Ò²¿É²»Òª´ËÐÐ£¬µ«Ðè×¢Òâ¶ÔÓ¦¹ØÏµ
 809   1          for (j=0;Str[j] != '\0'; j++)       //×Ö·û´®Î´½áÊø
 810   1          {    
 811   2              temp = Str[j] - 32;
 812   2              if(Column > 120)
 813   2              {
 814   3                  Column = 0;
 815   3                  Page += 2;          //Èôµ±Ç°ÐÐÐ´²»ÏÂ£¬ÔòÐèÒ»´Î»»Á½Ò³£¬·½¿É¼ÌÐøÐ´
 816   3              }
 817   2      
 818   2              SetPos(Page, Column);   
 819   2              for(i = 0; i < 8; i++) 
 820   2              {
 821   3                  WriteDat(F8X16[temp][i]);   //ÏÈÐ´Ò»¸ö×Ö·ûµÄÉÏ°ë²¿·Ö
 822   3              }
 823   2              
 824   2              SetPos(Page+1, Column);   
 825   2              for(i=8; i<16; i++) 
 826   2              {
 827   3                  WriteDat(F8X16[temp][i]);
 828   3              }
 829   2              Column += 8;  
 830   2          }
 831   1      }
 832          
 833          /*****************************************************************************
 834           º¯ Êý Ãû  : WriteChinese16x16
 835           ¹¦ÄÜÃèÊö  : Ð´ÈëÒ»×é16x16µÄÖÐÎÄ×Ö·û´®¡¾ÐèÍ¨¹ýÈ¡Ä£Èí¼þ¶ÔÐèÒªµÄºº×Ö½øÐÐ±àÂë¡¿
 836           ÊäÈë²ÎÊý  : unsigned char Page       ÎªÒ³·¶Î§0¡«3
 837                       unsigned char Column     ÎªÏÔÊ¾µÄºá×ø±ê0~114,  114 = 128-16(¼´±ØÐë±£Ö¤Ð´ÂúÒ»¸ö×Ö)
 838                       unsigned char Str[]      ÒªÏÔÊ¾µÄÖÐÎÄ×Ö·û´®
 839           Êä³ö²ÎÊý  : NONE
 840           ·µ »Ø Öµ  : NONE
 841           ±¸    ×¢  £ºÇëÓÃ»§×ÐÏ¸Ìå»á¸Ãº¯ÊýµÄÐ´·¨
 842          *****************************************************************************/
 843          void WriteChinese16x16(unsigned char Page,unsigned char Column,unsigned char Str[])
 844          {
 845   1          unsigned char i, j;
 846   1          unsigned int  Address; 
 847   1          
 848   1          Page <<= 1;                    //Á½Ò³ÎªÒ»ÐÐ£¬pageÈ¡ÖµÎª0~3
 849   1          for(j=0;Str[j]!='\0';)
 850   1          {
 851   2              i = 0;
 852   2              Address = 1;
 853   2              while(font16x16[i] > 127)  //ASCIIÂëÎª7Î»¶þ½øÖÆ±íÊ¾µÄ£¬Òò´Ë×î´óÎª127,Èô´óÓÚ127,ÒÑËµÃ÷Æä²»ÊÇASCIIÂë
             -ÁË¡£
 854   2                                     //ºº×Ö±íÊ¾ÐèÁ½¸ö×Ö½Ú£¬Îª¼æÈÝASCIIÂë£¬¼ÆËã»úÖÐÓÃÄÚÂë±íÊ¾£¬Á½¸ö×Ö½Ú×î¸ßÎ»¾ùÎª1£
             -¬¼´´óÓÚ127
 855   2              {
C51 COMPILER V9.52.0.0   OLED                                                              08/19/2018 17:18:13 PAGE 15  

 856   3                  if(font16x16[i] == Str[j])       //Èôºº×ÖÊý×éÖÐµÚi¸öºº×ÖÓëÊµ²ÎµÚj¸ö×ÖµÄµÚÒ»¸ö×Ö½ÚÏàÍ¬
 857   3                  {
 858   4                      if(font16x16[i+1] == Str[j+1]) //ÇÒºº×ÖÊý×éÖÐµÚi¸öºº×ÖÓëÊµ²ÎµÚj¸ö×ÖµÄµÚ¶þ¸ö×Ö½ÚÒ²ÏàÍ¬
 859   4                      {
 860   5                          Address = i*16;        //ÔòÊµ¼ÊµÚj¸öºº×Ö¾Í²ÉÓÃfont16*16µÄµÚi¸öºº×ÖµÄ±àÂë
 861   5                          break;
 862   5                      }
 863   4                  }
 864   3                  i += 2;                      //ºº×ÖË÷ÒýÇ°ÒÆÒ»¸ö,Ö¸Ïòºº×ÖÊý×éÖÐµÄÏÂÒ»¸öºº×Ö
 865   3              }                    //ºº×ÖÒÑ¶¨ÒåÎªcharÐÍ¸ñÊ½£¬¼´Ò»¸öºº×ÖÕ¼Á½¸öcharÐÍµÄ¿í¶È
 866   2              
 867   2              if(Column > 112)
 868   2              {
 869   3                  Column = 0;
 870   3                  Page  += 2;              //Ã¿»»Ò»´ÎÐÐ£¬Ôö¼ÓÁ½Ò³
 871   3              }
 872   2              
 873   2              if(Address != 1)                       // ËùÃ÷ºº×ÖµÄ×Ö·û´®·Ç¿Õ£¬»ò±íÊ¾Êµ²ÎµÄ±àÂë¿ÉÒÔÔÚºº×ÖÊý×é¶ÔÓ¦
             -±àÂëÖÐÕÒµ½                 
 874   2              {
 875   3                  SetPos(Page, Column);        //ÉèÖÃÉÏ°ë²¿·ÖµÄÆðÊ¼Î»ÖÃ
 876   3                  for(i=0;i<16;i++)               
 877   3                  {
 878   4                      WriteDat(font16x16_code[Address]);  //Ð´ºº×ÖÉÏ°ë²¿·Ö  
 879   4                      Address++;
 880   4                  }
 881   3                  SetPos(Page+1,Column);                  //ÉèÖÃÏÂ°ë²¿·ÖµÄÆðÊ¼Î»ÖÃ
 882   3                  for(i=0;i<16;i++)          
 883   3                  {
 884   4                      WriteDat(font16x16_code[Address]);  //Ð´ºº×ÖÏÂ°ë²¿·Ö
 885   4                      Address++;
 886   4                  }
 887   3                  j += 2;                       //Êµ²ÎÖÐµÄºº×ÖºóÒÆÒ»¸ö
 888   3              }
 889   2              else                                        //ÈôÊµ²ÎÊý×éÄÚÈÝÎª¿Õ£¬»òÕßÊµ²ÎÓëÖ¸¶¨µÄºº×ÖÊý×é³£Á¿²»´æ
             -ÔÚÏàÍ¬ºº×Ö            
 890   2              {
 891   3                  SetPos(Page,Column);            //Ôò½«²»´æÔÚ±àÂëµÄºº×ÖÓÃ¿Õ°×Ìî³ä
 892   3                  for(i=0;i<16;i++)
 893   3                  {
 894   4                      WriteDat(0);
 895   4                  }
 896   3                  SetPos(Page+1,Column);
 897   3                  for(i=0;i<16;i++)
 898   3                  {           
 899   4                      WriteDat(0);   
 900   4                  }
 901   3                  j++;                    //¿ÉÄÜºº×ÖÖÐ´æÔÚÒ»¸ö¿Õ°×»òÓ¢ÎÄ×Ö·û£¬Ìø¹ýÒ»¸ö×Ö½ÚÔÙÖØÐÂÆ¥Åä
 902   3              }
 903   2              
 904   2              Column += 16;                               //Ð´ÍêÒ»¸öºº×Ö£¬ÁÐÔö¼Ó16
 905   2          }
 906   1      }
 907          
 908          /*****************************************************************************
 909           º¯ Êý Ãû  : WriteMixStrXx16
 910           ¹¦ÄÜÃèÊö  : Êä³ö16x16ºº×ÖºÍ8x16×Ö·û»ìºÏ×Ö·û´® £¨×Ö·û´®±í¸ñÖÐÐèº¬ÓÐ´Ë×Ö£©
 911           ÊäÈë²ÎÊý  : unsigned char Page       ÎªÒ³·¶Î§0¡«3
 912                 unsigned char Column     ÎªÏÔÊ¾µÄºá×ø±ê0~114
 913                       unsigned char Str[]      ÒªÏÔÊ¾µÄ»ìºÏ×Ö·û´®
 914           Êä³ö²ÎÊý  : NONE
 915           ·µ »Ø Öµ  : NONE
C51 COMPILER V9.52.0.0   OLED                                                              08/19/2018 17:18:13 PAGE 16  

 916          *****************************************************************************/
 917          void WriteMixStrXx16(unsigned char Page, unsigned char Column, unsigned char Str[])
 918          {
 919   1          unsigned char TempStr[3];
 920   1          unsigned char i = 0;    
 921   1      
 922   1          while(Str[i] != '\0')                       //×Ö·û´®Î´½áÊø
 923   1          {
 924   2              if(Str[i] > 127)                        //Èô·ÇASCIIÂë±íÖÐ×Ö·û
 925   2              {
 926   3                  TempStr[0] = Str[i];                  //½«Êµ²ÎµÚÒ»¸ö×Ö½ÚºÍµÚ¶þ¸ö×Ö½Ú·Ö±ðÔÝ´æ£¨¿ÉÄÜ¸ÕºÃÊÇÒ»¸öºº×Ö
             -£©
 927   3                  TempStr[1] = Str[i+1];
 928   3                  TempStr[2] = '\0';                        //ÔÝ´æ×Ö·û´®½áÊø×Ö·û
 929   3                  WriteChinese16x16(Page, Column, TempStr);  //ÏÔÊ¾ºº×Ö
 930   3                  Column += 16;               //ÁÐ¼Ó16
 931   3                  i += 2;                   //×Ö·ûË÷Òý¼Ó2£¬ºº×ÖË÷Òý¼Ó1£¨Ò»¸öºº×ÖÁ½¸ö×Ö½Ú£©
 932   3              }
 933   2              else                      //¼´»ìºÏ×Ö·û´®µ±ÖÐ³öÏÖÓ¢ÎÄ×Ö·û
 934   2              {
 935   3                  TempStr[0] = Str[i];    
 936   3                  TempStr[1] = '\0';                        //½«Ò»¸öÓ¢ÎÄ×Ö·ûµ±×ö×Ö·û´®
 937   3                  WriteStr_8x16(Page, Column, TempStr);     //Ð´TemStr
 938   3                  Column += 8;                //ÁÐÔö¼Ó8ÁÐ
 939   3                  i += 1;                   //×Ö·û´®Ë÷ÒýÔö¼ÓÒ»¸ö×Ö½Ú
 940   3              }
 941   2          }
 942   1      } 
 943          
 944          /*****************************************************************************
 945           º¯ Êý Ãû  : PrintChar
 946           ¹¦ÄÜÃèÊö  : ½«Ò»¸öCharÐÍÊý×ª»»³É3Î»Êý½øÐÐÏÔÊ¾
 947           ÊäÈë²ÎÊý  : unsigned char Page      ·¶Î§Îª0¡«7
 948                 unsigned char Column  ·¶Î§Îª0¡«122
 949                       char          Dat       ÐèÒª×ª»¯ÏÔÊ¾µÄÊýÖµ -128~127
 950           Êä³ö²ÎÊý  : NONE
 951           ·µ »Ø Öµ  : NONE
 952          *****************************************************************************/
 953          void PrintChar(unsigned char Page, unsigned char Column, char Dat)
 954          {
 955   1          unsigned int i, j, k, temp;
 956   1      
 957   1          if(Dat < 0)
 958   1          {
 959   2              WriteChar_6x8(Page, Column, '-');   //ÈôÎª¸ºÊý£¬ÏÈÏÔÊ¾Æä¸ººÅ
 960   2              temp = (unsigned char)(-Dat);       //½«¸ºÊý×ª»»ÎªÕýÊý
 961   2          }
 962   1          else
 963   1          {
 964   2              WriteChar_6x8(Page, Column, '+');
 965   2              temp = (unsigned char)Dat;        //²»ÄÜÖ±½ÓÓÃÓÚÏÔÊ¾£¬ÒòÎªÊýÖµ½«µÈÐ§ÎªACSii£¬ÏÔÊ¾½«±ä³É×Ö·û 
 966   2          }
 967   1          i = temp/100;               //·ÖÀë°ÙÎ»Êý
 968   1          j = temp/10%10;               //·ÖÀëÊ®Î»Êý
 969   1          k = temp%10;                //·ÖÀë¸öÎ»Êý
 970   1          
 971   1          WriteChar_6x8(Page, Column+ 6, i);        //Ð´°ÙÎ»Êý
 972   1          WriteChar_6x8(Page, Column+12, j);        //Ð´Ê®Î»Êý
 973   1          WriteChar_6x8(Page, Column+18, k);        //Ð´¸öÎ»Êý
 974   1      }
 975          
 976          /*****************************************************************************
C51 COMPILER V9.52.0.0   OLED                                                              08/19/2018 17:18:13 PAGE 17  

 977           º¯ Êý Ãû  : PrintShort
 978           ¹¦ÄÜÃèÊö  : ½«Ò»¸öShortÐÍÊý×ª»»³É5Î»Êý½øÐÐÏÔÊ¾
 979           ÊäÈë²ÎÊý  : unsigned char Page    ·¶Î§Îª0¡«7
 980                       unsigned char Column  ·¶Î§Îª0~122
 981                       int           Dat     ÐèÒª×ª»¯ÏÔÊ¾µÄÊýÖµ
 982           Êä³ö²ÎÊý  : NONE
 983           ·µ »Ø Öµ  : NONE
 984          *****************************************************************************/
 985          void PrintShort(unsigned char Page, unsigned char Column, int Dat)
 986          {
 987   1          unsigned int i, j, k, l, m, temp;  
 988   1          if(Dat < 0)
 989   1          {
 990   2              WriteChar_6x8(Page,Column,'-');
 991   2              temp = (unsigned int)(-Dat);  
 992   2          }
 993   1          else
 994   1          {
 995   2              WriteChar_6x8(Page,Column,'+');
 996   2              temp = (unsigned int)Dat;
 997   2          }
 998   1          
 999   1          l = temp/10000;                       //·ÖÀëÍòÎ»
1000   1          m = temp/1000%10;             //·ÖÀëÇ§Î»
1001   1          i = temp/100%10;              //·ÖÀë°ÙÎ»
1002   1          j = temp/10%10;               //·ÖÀëÊ®Î»
1003   1          k = temp%10;                //·ÖÀë¸öÎ»
1004   1          WriteChar_6x8(Page, Column+ 6, l);      //ÏÔÊ¾ÍòÎ»
1005   1          WriteChar_6x8(Page, Column+12, m);      //ÏÔÊ¾Ç§Î»
1006   1          WriteChar_6x8(Page, Column+18, i);      //ÏÔÊ¾°ÙÎ»
1007   1          WriteChar_6x8(Page, Column+24, j);      //ÏÔÊ¾Ê®Î»
1008   1          WriteChar_6x8(Page, Column+30, k);      //ÏÔÊ¾¸öÎ»
1009   1      
1010   1      }
1011          
1012          /*****************************************************************************
1013           º¯ Êý Ãû  : PrintImage
1014           ¹¦ÄÜÃèÊö  : ½«Í¼ÏñÏÔÊ¾³öÀ´
1015           ÊäÈë²ÎÊý  : unsigned char * ImageTable     ¶þÎ¬Í¼ÏñÊý×éµÄµØÖ·
1016                       unsigned char   RowNum         ¶þÎ¬Í¼ÏñµÄÐÐÊý1~64
1017                       unsigned char   ColumnNum      ¶þÎ¬Í¼ÏñµÄÁÐÊý1~128
1018           Êä³ö²ÎÊý  : NONE
1019           ·µ »Ø Öµ  : NONE
1020           ±¸    ×¢  £º¶ÔÓ¦Í¼ÐÎµÄ±àÂëÉú³ÉÇëÊ¹ÓÃÈí¼þImage2Lcd v3.2.
1021                       Êä³öÊý¾ÝÀàÐÍ   £º CÓïÑÔÊý×é£¨*.C£©
1022                 É¨Ãè·½Ê½       £º Êý¾ÝË®Æ½£¬×Ö½Ú´¹Ö±£¨ÕâÑùÈí¼þÊµÏÖ½«ºÜÈÝÒ×ÊµÏÖ£©
1023                 Êä³ö»Ò¶È       £º µ¥É«£¨ÒòÎªËùÑ¡ÓÃµÄOLEDÎªµ¥É«£©
1024                 °üº¬Í·ÏñÍ·Êý¾Ý £º ²»°üº¬£¨°üº¬ÓÃÓÚÉãÏñÍ·ËùÐèµÄÊý×ÖÍ¼ÏñÐÅÏ¢£©
1025                 ×Ö½ÚÄÚÊý¾Ý·´Ðò :  Ñ¡Ôñ·´Ðò£¨¼´»­¡Ì£©
1026                 ×ÔÓÒÖÁ×óÉ¨Ãè   £º ²»Ñ¡Ôñ
1027                 ×Ôµ×ÖÁ¶¥É¨Ãè   £º ²»Ñ¡Ôñ
1028                 ¸ßÎ»ÔÚÇ°       :  ²»Ñ¡Ôñ
1029          *****************************************************************************/
1030          void PrintImage(unsigned char ImageTable[], unsigned char RowNum, unsigned char ColumnNum)
1031          {
1032   1          unsigned char i,j,m,n;
1033   1        unsigned int num = 0;               //±£´æÒ»·ùÍ¼Ïñ°üº¬µÄ×Ö½Ú¸öÊý
1034   1      
1035   1        if(RowNum > 63)        //Ô½½çÅÐ¶Ï
1036   1          RowNum = 63;
1037   1        if(ColumnNum > 127)
1038   1          ColumnNum = 127;
C51 COMPILER V9.52.0.0   OLED                                                              08/19/2018 17:18:13 PAGE 18  

1039   1      
1040   1        m = RowNum/8;     //ÐÐÊý¶Ô8È¡Õû
1041   1        n = RowNum%8;   //ÐÐÊý¶Ô8È¡Óà
1042   1        if(n)       //ÈôÓàÊý²»Îª0£¬¼´½«ÐÐÊý°´8£¨×Ö½Ú£©½øÐÐ·Ö×é£¬ÓÐÓàÊý
1043   1          m = m + 1 ; //Ôò½«²»ÄÜ¹¹³ÉÒ»¸ö×Ö½ÚµÄÐÐÊý²¹ÆëÎªÒ»¸ö×Ö½Ú
1044   1      
1045   1        for(i=0;i<m;i++)
1046   1        { 
1047   2          SetPos(i,0);
1048   2          for(j=0;j<ColumnNum;j++)
1049   2          { 
1050   3            WriteDat(ImageTable[num]);
1051   3            num++;
1052   3          }
1053   2        }
1054   1      }
1055          
1056          //========== ÏÔÊ¾Ð§¹û´¦ÀíÏà¹Øº¯Êý  ===============
1057          /*****************************************************************************
1058           º¯ Êý Ãû  : ConHorScroll
1059           ¹¦ÄÜÃèÊö  : Á¬ÐøË®Æ½¹öÆÁ
1060           ÊäÈë²ÎÊý  : unsigned char StartPage       ¹öÆÁÆðÊ¼µØÖ·
1061                       unsigned char EndPage         ¹öÆÁÖÕÖ¹µØÖ·
1062                       bit Direction                 ¹öÆÁ·½Ïò£¨0£ºÓÒ£»1£º×ó£©
1063                 unsigned char speed       ¹öÆÁËÙ¶È£¨È¡Öµ0~7£©
1064           Êä³ö²ÎÊý  : NONE
1065           ·µ »Ø Öµ  : NONE
1066          *****************************************************************************/
1067          void ConHorScroll(unsigned char StartPage,unsigned char EndPage,bit Direction,unsigned char speed)
1068          {
1069   1        WriteCmd(0x2e);          //ÈôÓÐÒÆÆÁ²Ù×÷£¬ÏÈÍ£Ö¹£¬ÒÔ±ÜÃâÆÆ»µRAMÄÚÈÝ
1070   1        
1071   1        if(Direction)  
1072   1          WriteCmd(0x27);    //×óÒÆ£¨Êµ¼ÊÎªÏÈÍ£Ö¹×óÒÆ£©
1073   1        else
1074   1          WriteCmd(0x26);    //ÓÒÒÆ£¨Êµ¼ÊÎªÏÈÍ£Ö¹ÓÒÒÆ£©
1075   1      
1076   1        WriteCmd(0x00);
1077   1        WriteCmd(StartPage);     //»î¶¯ÇøÓòÆðÊ¼Ò³
1078   1        WriteCmd(speed);         //ÉèÖÃ¹öÆÁËÙ¶È  0£º5Ö¡£»1£º64Ö¡£»2£º128Ö¡£»3£º256Ö¡£»4£º3Ö¡£»5£º4Ö¡£»6£º25Ö¡£»7£
             -º2Ö¡
1079   1        WriteCmd(EndPage);       //»î¶¯ÇøÓòÖÕÖ¹Ò³
1080   1        WriteCmd(0x00);
1081   1        WriteCmd(0xff);
1082   1        WriteCmd(0x2f);      //¼¤»îÒÆÆÁ
1083   1      
1084   1          
1085   1      }
1086          
1087          /*****************************************************************************
1088           º¯ Êý Ãû  : ConVerHorScroll
1089           ¹¦ÄÜÃèÊö  : Á¬Ðø´¹Ö±Ë®Æ½¹öÆÁ£¨¼´Ð±½Ç¹öÆÁ£©
1090           ÊäÈë²ÎÊý  : unsigned char StartPage       ¹öÆÁÆðÊ¼µØÖ·
1091                       unsigned char EndPage         ¹öÆÁÖÕÖ¹µØÖ·
1092                       bit Direction                 ¹öÆÁ·½Ïò£¨0£ºÓÒÉÏ½Ç£»1£º×óÉÏ½Ç£©
1093                 unsigned char speed       ¹öÆÁËÙ¶È  £¨È¡Öµ0~7£©
1094                 unsigned char VerOffset       ´¹Ö±Æ«ÒÆÁ¿£¨È¡Öµ0~63£©,Îª0Ê±½«Ã»ÓÐ´¹Ö±·½ÏòÉÏÒÆ¶¯£¬Ð§¹û½«µÈÍ¬ÓÚË®Æ½ÒÆ¶¯
1095           Êä³ö²ÎÊý  : NONE
1096           ·µ »Ø Öµ  : NONE
1097          *****************************************************************************/
1098          void ConVerHorScroll(unsigned char StartPage,unsigned char EndPage,bit Direction,unsigned char speed,unsig
             -ned char VerOffset)
C51 COMPILER V9.52.0.0   OLED                                                              08/19/2018 17:18:13 PAGE 19  

1099          {
1100   1      
1101   1        WriteCmd(0x2e);          //ÈôÓÐÒÆÆÁ²Ù×÷£¬ÏÈÍ£Ö¹£¬ÒÔ±ÜÃâÆÆ»µRAMÄÚÈÝ
1102   1        if(Direction)  
1103   1          WriteCmd(0x2a);    //Ïò×óÉÏ½ÇÒÆÆÁ 
1104   1        else
1105   1          WriteCmd(0x29);    //ÏòÓÒÉÏ½ÇÒÆÆÁ
1106   1      
1107   1        WriteCmd(0x00);
1108   1        WriteCmd(StartPage);     //»î¶¯ÇøÓòÆðÊ¼Ò³
1109   1        WriteCmd(speed);         //ÉèÖÃ¹öÆÁËÙ¶È  0£º5Ö¡£»1£º64Ö¡£»2£º128Ö¡£»3£º256Ö¡£»4£º3Ö¡£»5£º4Ö¡£»6£º25Ö¡£»7£
             -º2Ö¡
1110   1        WriteCmd(EndPage);       //»î¶¯ÇøÓòÖÕÖ¹Ò³
1111   1        WriteCmd(0x00);
1112   1        WriteCmd(VerOffset);   //´¹Ö±·½ÏòÆ«ÒÆÁ¿£¬¼´Öµ0~63
1113   1        WriteCmd(0x2f);      //¼¤»îÒÆÆÁ
1114   1          
1115   1      }
1116          
1117          /*****************************************************************************
1118           º¯ Êý Ãû  : ConVerHorScroll
1119           ¹¦ÄÜÃèÊö  : ÉèÖÃ´¹Ö±¹öÆÁµÄÇøÓò
1120           ÊäÈë²ÎÊý  : unsigned char FixRowNoe       ¹Ì¶¨ÇøÓòÊ×ÐÐ
1121                       unsigned char ScrollRowNo     ¹Ì¶¨ÇøÓòÎ²ÐÐ£¬¹öÆÁÐÐ´Ó¹Ì¶¨ÇøÓòÎ²ÐÐÏÂÒ»ÐÐ¿ªÊ¼
1122           Êä³ö²ÎÊý  : NONE
1123           ·µ »Ø Öµ  : NONE
1124          *****************************************************************************/
1125          void SetVerScrollArea(unsigned char FixRowNo,unsigned char ScrollRowNo)
1126          {                 //ÅäÖÃËµÃ÷£º
1127   1                        //         1. FixRowNo = 0, ScrollRowNo = 64 £ºÕûÆÁ¹ö¶¯
1128   1        WriteCmd(0xa3);               //         2. FixRowNo = 0, ScrollRowNo < 64 £º¶¥²¿ÇøÓò¹ö¶¯
1129   1        WriteCmd(FixRowNo);       //         3. FixRowNo + ScrollRowNo < 64    £ºÖÐ¼äÆÁ¹ö¶¯
1130   1        WriteCmd(ScrollRowNo);      //         4. FixRowNo + ScrollRowNo = 64    £ºµ×²¿ÇøÓò¹ö¶¯
1131   1      }
1132          
1133          //----------  ÏÔÊ¾Êý×Ö0~9 6x8¸ñÊ½--------------------------------------
1134          void PrintNum_6x8(unsigned char Page,unsigned char Column,unsigned char num)    //numÈ¡ÖµÎª0~9
1135          {
1136   1        unsigned char i;
1137   1      
1138   1        if(Column > 122)
1139   1        {
1140   2          Page = Page + 1;
1141   2          Column = 0;
1142   2        }
1143   1        if(num<10)
1144   1        {
1145   2          SetPos(Page,Column);
1146   2          for(i=0;i<6;i++)
1147   2          {
1148   3            WriteDat(F6x8[num+16][i]);      //Êý×ÖÔÚasciiÂë±íÖÐ´Ó48¿ªÊ¼,F6*8µÄµÚ16ÐÐ¿ªÊ¼
1149   3          }
1150   2        }
1151   1        if((num>9)&&(num<16))
1152   1        {
1153   2          SetPos(Page,Column);
1154   2          for(i=0;i<6;i++)
1155   2          {
1156   3            WriteDat(F6x8[num+23][i]);      //Êý×ÖÔÚasciiÂë±íÖÐ´Ó48¿ªÊ¼£¬F6*8µÄµÚ33ÐÐ¿ªÊ¼£¬µ«10¶ÔÓ¦A£¬ÔÙ¼õµô10Îª23
1157   3          } 
1158   2        }
1159   1      
C51 COMPILER V9.52.0.0   OLED                                                              08/19/2018 17:18:13 PAGE 20  

1160   1      }
1161          
1162          //----------  ÏÔÊ¾Êý×Ö0~9 8x16¸ñÊ½--------------------------------------
1163          void PrintNum_8x16(unsigned char Page,unsigned char Column,unsigned char num)   //numÈ¡ÖµÎª0~15
1164          {
1165   1        unsigned char i;
1166   1         Page <<= 1;  
1167   1        if(Column > 120)
1168   1        {
1169   2          Page = Page + 2;
1170   2          Column = 0;
1171   2        }
1172   1        if(num<10)
1173   1        {
1174   2          SetPos(Page,Column);           //ÉèÖÃÉÏ°ëÒ³ÏÔÊ¾ÏÔÊ¾µÄÎ»ÖÃ
1175   2          for(i=0;i<8;i++)             //ÏÔÊ¾ÉÏ°ëÒ³ÄÚÈÝ
1176   2          {
1177   3            WriteDat(F8X16[num+16][i]);
1178   3          }
1179   2        
1180   2          SetPos(Page+1,Column);           //ÉèÖÃÏÂ°ëÒ³ÏÔÊ¾ÏÔÊ¾µÄÎ»ÖÃ
1181   2          for(i=8;i<16;i++)            //ÏÔÊ¾ÏÂ°ëÒ³ÄÚÈÝ
1182   2          {
1183   3            WriteDat(F8X16[num+16][i]);
1184   3          }
1185   2        }
1186   1        if((num>9)&&(num<16))
1187   1        {
1188   2              SetPos(Page,Column);      //ÉèÖÃÉÏ°ëÒ³ÏÔÊ¾ÏÔÊ¾µÄÎ»ÖÃ
1189   2          for(i=0;i<8;i++)             //ÏÔÊ¾ÉÏ°ëÒ³ÄÚÈÝ
1190   2          {
1191   3            WriteDat(F8X16[num+23][i]);
1192   3          }
1193   2        
1194   2          SetPos(Page+1,Column);           //ÉèÖÃÏÂ°ëÒ³ÏÔÊ¾ÏÔÊ¾µÄÎ»ÖÃ
1195   2          for(i=8;i<16;i++)            //ÏÔÊ¾ÏÂ°ëÒ³ÄÚÈÝ
1196   2          {
1197   3            WriteDat(F8X16[num+23][i]);
1198   3          }
1199   2        }
1200   1      
1201   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1822    ----
   CONSTANT SIZE    =   1900    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      61
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
